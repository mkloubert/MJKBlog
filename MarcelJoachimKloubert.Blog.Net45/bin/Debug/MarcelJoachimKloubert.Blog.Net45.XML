<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MarcelJoachimKloubert.Blog.Net45</name>
    </assembly>
    <members>
        <member name="T:NotificationObjectBase">
            <summary>
            Ein Basis-Objekt für ein ViewModel.
            </summary>
        </member>
        <member name="M:NotificationObjectBase.#ctor">
            <summary>
            Initialisiert eine neue Instanz
            der Klasse <see cref="T:NotificationObjectBase"/>.
            </summary>
        </member>
        <member name="M:NotificationObjectBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Führt das <see cref="E:NotificationObjectBase.PropertyChanged"/>
            Ereignis aus.
            </summary>
            <typeparam name="T">Typ der zugrundeliegenden Eigenschaft.</typeparam>
            <param name="expr">Die zugrundeliegende Eigenschaft aus Ausdruck.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="expr"/> ist ungültig.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expr"/> ist kein gültiger Ausdruck, der eine
            Eigenschaft beschreibt.
            </exception>
            <returns>
            Ereignis wurde ausgeführt oder nicht, da kein Delegate an Ereignis
            registriert wurde.
            </returns>
        </member>
        <member name="M:NotificationObjectBase.OnPropertyChanged(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Führt das <see cref="E:NotificationObjectBase.PropertyChanged"/>
            Ereignis aus.
            </summary>
            <param name="propertyName">Der Name der zugrundeliegenden Eigenschaft.</param>
            <returns>
            Ereignis wurde ausgeführt oder nicht, da kein Delegate an Ereignis
            registriert wurde.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> ist ungültig.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> ist eine <see langword="null"/> Referenz.
            </exception>
        </member>
        <member name="M:NotificationObjectBase.OnPropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Führt das <see cref="E:NotificationObjectBase.PropertyChanging"/>
            Ereignis aus.
            </summary>
            <typeparam name="T">Typ der zugrundeliegenden Eigenschaft.</typeparam>
            <param name="expr">Die zugrundeliegende Eigenschaft aus Ausdruck.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="expr"/> ist ungültig.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="expr"/> ist kein gültiger Ausdruck, der eine
            Eigenschaft beschreibt.
            </exception>
            <returns>
            Ereignis wurde ausgeführt oder nicht, da kein Delegate an Ereignis
            registriert wurde.
            </returns>
        </member>
        <member name="M:NotificationObjectBase.OnPropertyChanging(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Führt das <see cref="E:NotificationObjectBase.PropertyChanging"/>
            Ereignis aus.
            </summary>
            <param name="propertyName">Der Name der zugrundeliegenden Eigenschaft.</param>
            <returns>
            Ereignis wurde ausgeführt oder nicht, da kein Delegate an Ereignis
            registriert wurde.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> ist ungültig.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> ist eine <see langword="null"/> Referenz.
            </exception>
        </member>
        <member name="M:NotificationObjectBase.SetProperty``1(``0@,``0,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Setzt das Feld einer Eigenschaft dieses Objektes, sofern sich der
            alte und der neue Wert unterscheiden.
            </summary>
            <typeparam name="T">Typ der Eigenschaft.</typeparam>
            <param name="field">
            Der alte Wert bzw. das Feld, das den Wert der zugrundeliegenden
            Eigenschaft speichert.
            </param>
            <param name="newValue">Der neue Wert.</param>
            <param name="propertyName">
            Der Name der zugrundeliegenden Eigenschaft.
            </param>
            <returns>
            Die Werte <paramref name="field" /> und <paramref name="newValue" />
            gelten als verschieden oder nicht.
            </returns>
            <remarks>
            Der Wert für <paramref name="propertyName" /> wird i.d.R. automatisch
            vom Compiler gesetzt. Diese Methode sollte stehts aus der zugrundeliegenden
            Eigenschaft aufgerufen werden, sofern <paramref name="propertyName" />
            nicht explizit gesetzt wird.
            </remarks>
        </member>
        <member name="E:NotificationObjectBase.PropertyChanged">
            <summary>
            
            </summary>
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
        </member>
        <member name="E:NotificationObjectBase.PropertyChanging">
            <summary>
            
            </summary>
            <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging"/>
        </member>
    </members>
</doc>
